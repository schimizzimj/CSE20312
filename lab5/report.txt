Marcus Schimizzi
3/06/17

Running the perspective from the user's perspective, the program merely involves inputting single-line representations of trees, reading left-to-right and top-to-bottom. The program reads in input one line at a time. Upon reading a line, it processes the tree and outputs whether or not it representsa binary search tree or not. The program will continue this process until it detects the end of input. 

Internally, the program uses recursion to check whether or not a list of numbers represents a binary search tree. To start, the program reads in the first number off of the line. This number indicates the length of the line and the size of the tree. Then, it creates an array for the size of the remaining numbers on the line. Using a FOR loop from 0 to that initial size indicator, the loop reads in the rest of the numbers of the line and uses them to populate the previously initialized array. Then, the program calls the recursive function checkBST() to validate whether or not the tree is a Binary Search Tree. The function takes five parameters, as follows: the tree array, the current node position, the number of nodes in the tree, the current minimum value allowed, and the current maximum value allowed. The function first checks if the current node has a value of -1, if so, this means it has reached the end of that line of the tree and it returns true. Then, the functions checks whether or not the current node's value follows the rules of a BST based on the current allowed min and max. If the node does not evaluate to true on any of these tests, then the function recursively calls itself for its left and right children, first checking to make sure these children are within the bounds of the tree to avoid memory errors. After checking the entire tree, checkBST() returns either true or false. Using this output in an IF statement, the program then outputs whether the tree is a BST or not. Then, it repeats for the next line until it detects the end of input.

Finally, verification of the program's functionality occurred with the aid of the supplied Makefile and test files. When I first tested my program, it compiled correctly, but did not pass the memory tests. After exploring a bit, I realized that the recursive function was trying to access nonexistent parts of the tree. To combat that, I added the IF-ELSEIF-ELSE statement to check whether or not children are within bounds before attempting to call the recursive function on them. Upon addding this, my program passed all of the tests correctly and was verified.
