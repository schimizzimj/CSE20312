Marcus Schimizzi
3/27/17

  This program doesn't have too much going on from a user's perspective. The program simply takes inputs of various rounds of people having a hand of a single card. Then, the program outputs a sorted list for each round of the names of the hands sorted from greatest to least. 
    Internally, the program makes reads in rounds one at a time, sorts the round, outputs it, and keep iterating through this until an end of input is detected in the form of "-1". The program represents each card through the use of a struct, storing each round in a vector of these structs. The 'cardholder' struct has a string to represent the person's name, a char for the rank, and a char for the suit. The rank actually proved somewhat tricky to represent, simply because a char can only hold one single character, so it can't hold the number "10". I worked my way around this by reading in rank as a string and if it equaled "10", I represented it as the character ':'. I chose this because it falls right after '9' in the ASCII table, so its value is ten when subtracting '0'. Then, to accomodate for ranks of jack, queen, king, and ace (as well as the different suits), I created simple lookup tables to assign these ranks a representative numerical value to allow for sorting. Using all of this, I created function called sortMain() that links the two functions sortRank() and sortSuit(). The sortMain() first tries to sort two inputted cardholder structs by rank using sortRank(), and then will sort by suit using sortSuit() if the ranks are the same (these other two functions are pretty self-explanatory). Finally, I made my own elementary sorting function that simply iterates through the vector until finding the proper spot for the card using the sortMain() function. It also has special cases for an empty vector and placing a card at the back to avoid errors. 

  To check that the function worked, I used the supplied make file and make test. Eventually, I got my program to work as intended but first had to solve a few issues. Mainly, the sort() algorithm kept supplying some strange errors when I tried to provide it with my custom sorting function. So, I eventually decided creating my own sorting function would be easier. 
